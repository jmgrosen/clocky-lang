def mapsig: for k : clock. [](sample -> sample) -> ~^(k) sample -> ~^(k) sample =
  \f. (&^(k) mappedsig. \sigin.
         let (x, siginp) = *sigin in
         (unbox f) x :: `(!(unbox mappedsig) !siginp))

def lin: for k : clock. ~^(k) sample =
    ((&^(k) s. \x. x :: `(!(unbox s) (addone x))) : sample -> ~^(k) sample) 2.0

def main: for k : clock. ~^(k) sample = mapsig @(k) (box (\x. addone (addone x))) (lin @(k))
